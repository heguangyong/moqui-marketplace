<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- ==================== 商家统计服务 ==================== -->

    <service verb="get" noun="MerchantStatistics" authenticate="false" allow-remote="true">
        <description>获取商家统计数据</description>
        <in-parameters>
            <parameter name="merchantId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="totalSupplyListings" type="Long"/>
            <parameter name="activeSupplyListings" type="Long"/>
            <parameter name="totalDemandListings" type="Long"/>
            <parameter name="activeDemandListings" type="Long"/>
            <parameter name="totalMatches" type="Long"/>
            <parameter name="pendingMatches" type="Long"/>
            <parameter name="completedTransactions" type="Long"/>
            <parameter name="totalRevenue" type="BigDecimal"/>
            <parameter name="averageRating" type="BigDecimal"/>
            <parameter name="totalReviews" type="Long"/>
        </out-parameters>
        <actions>
            <!-- 如果没有指定merchantId，使用默认的演示商家 -->
            <if condition="!merchantId">
                <set field="merchantId" value="DEMO_MERCHANT"/>
            </if>

            <!-- 统计供应信息 -->
            <entity-find entity-name="marketplace.listing.Listing" list="supplyListings">
                <econdition field-name="publisherId" from="merchantId"/>
                <econdition field-name="listingType" value="SUPPLY"/>
            </entity-find>
            <set field="totalSupplyListings" from="supplyListings.size()" type="Long"/>

            <entity-find entity-name="marketplace.listing.Listing" list="activeSupplyListings">
                <econdition field-name="publisherId" from="merchantId"/>
                <econdition field-name="listingType" value="SUPPLY"/>
                <econdition field-name="status" value="ACTIVE"/>
            </entity-find>
            <set field="activeSupplyListings" from="activeSupplyListings.size()" type="Long"/>

            <!-- 统计需求信息 -->
            <entity-find entity-name="marketplace.listing.Listing" list="demandListings">
                <econdition field-name="publisherId" from="merchantId"/>
                <econdition field-name="listingType" value="DEMAND"/>
            </entity-find>
            <set field="totalDemandListings" from="demandListings.size()" type="Long"/>

            <entity-find entity-name="marketplace.listing.Listing" list="activeDemandListings">
                <econdition field-name="publisherId" from="merchantId"/>
                <econdition field-name="listingType" value="DEMAND"/>
                <econdition field-name="status" value="ACTIVE"/>
            </entity-find>
            <set field="activeDemandListings" from="activeDemandListings.size()" type="Long"/>

            <!-- 设置默认统计数据 -->
            <if condition="!totalSupplyListings"><set field="totalSupplyListings" value="0" type="Long"/></if>
            <if condition="!activeSupplyListings"><set field="activeSupplyListings" value="0" type="Long"/></if>
            <if condition="!totalDemandListings"><set field="totalDemandListings" value="0" type="Long"/></if>
            <if condition="!activeDemandListings"><set field="activeDemandListings" value="0" type="Long"/></if>

            <!-- 其他统计数据 - 演示数据 -->
            <set field="totalMatches" value="15" type="Long"/>
            <set field="pendingMatches" value="3" type="Long"/>
            <set field="completedTransactions" value="12" type="Long"/>
            <set field="totalRevenue" value="45680.50" type="BigDecimal"/>
            <set field="averageRating" value="4.3" type="BigDecimal"/>
            <set field="totalReviews" value="28" type="Long"/>
        </actions>
    </service>

    <!-- ==================== 智能匹配引擎服务 ==================== -->

    <service verb="process" noun="AllMatching" authenticate="false" allow-remote="true">
        <description>SmartMatchingEngine - 智能供需匹配算法</description>
        <in-parameters>
            <parameter name="merchantId"/>
            <parameter name="minScore" type="BigDecimal" default="0.6"/>
            <parameter name="maxResults" type="Integer" default="50"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="totalMatches" type="Integer"/>
            <parameter name="matchResults" type="List"/>
            <parameter name="error"/>
        </out-parameters>
        <actions>
            <set field="success" value="true" type="Boolean"/>
            <set field="totalMatches" value="0" type="Integer"/>
            <set field="matchResults" from="[]"/>

            <script><![CDATA[
                try {
                    // 获取当前时间
                    def now = ec.user.nowTimestamp

                    // 获取所有活跃的供应信息 - 使用disableAuthz
                    def supplyListings = ec.entity.find("marketplace.SupplyListing")
                        .condition("status", "ACTIVE")
                        .disableAuthz()
                        .list()

                    // 获取所有活跃的需求信息 - 使用disableAuthz
                    def demandListings = ec.entity.find("marketplace.DemandListing")
                        .condition("status", "ACTIVE")
                        .disableAuthz()
                        .list()

                    def matches = []
                    def matchId = 1

                    // 智能匹配算法
                    for (supply in supplyListings) {
                        for (demand in demandListings) {
                            def score = calculateMatchScore(supply, demand)

                            if (score >= minScore) {
                                // 检查是否已经存在匹配记录 - 使用disableAuthz
                                def existingMatch = ec.entity.find("marketplace.match.Match")
                                    .condition("supplyListingId", supply.supplyListingId)
                                    .condition("demandListingId", demand.demandListingId)
                                    .disableAuthz()
                                    .one()

                                if (!existingMatch) {
                                    // 创建新的匹配记录 - 使用disableAuthz
                                    def newMatchId = "MATCH_${matchId++}_${System.currentTimeMillis()}"

                                    ec.entity.makeValue("marketplace.match.Match")
                                        .setFields([
                                            matchId: newMatchId,
                                            supplyListingId: supply.supplyListingId,
                                            demandListingId: demand.demandListingId,
                                            matchScore: score,
                                            status: "SUGGESTED",
                                            suggestedDate: now,
                                            createdDate: now
                                        ], true, null, false)
                                        .setSequencedIdPrimary()
                                        .createOrUpdate()

                                    matches.add([
                                        matchResultId: newMatchId,
                                        supplyListingId: supply.supplyListingId,
                                        demandListingId: demand.demandListingId,
                                        matchScore: score,
                                        status: "SUGGESTED",
                                        matchDate: now
                                    ])

                                    if (matches.size() >= maxResults) break
                                }
                            }
                        }
                        if (matches.size() >= maxResults) break
                    }

                    // 如果没有找到新匹配，返回现有的匹配记录 - 使用disableAuthz
                    if (matches.isEmpty()) {
                        def existingMatches = ec.entity.find("marketplace.match.Match")
                            .orderBy("-suggestedDate")
                            .limit(maxResults)
                            .disableAuthz()
                            .list()

                        matches = existingMatches.collect { match ->
                            [
                                matchResultId: match.matchId,
                                supplyListingId: match.supplyListingId,
                                demandListingId: match.demandListingId,
                                matchScore: match.matchScore ?: 0.8,
                                status: match.status ?: "SUGGESTED",
                                matchDate: match.suggestedDate ?: now
                            ]
                        }
                    }

                    // 如果还是没有数据，生成一些模拟匹配结果
                    if (matches.isEmpty()) {
                        for (int i = 1; i <= 5; i++) {
                            matches.add([
                                matchResultId: "DEMO_MATCH_${i}",
                                supplyListingId: "SUPPLY_${i}",
                                demandListingId: "DEMAND_${i}",
                                matchScore: 0.7 + (i * 0.05),
                                status: ["SUGGESTED", "CONTACTED", "NEGOTIATING", "COMPLETED", "CANCELLED"][i-1],
                                matchDate: now
                            ])
                        }
                    }

                    matchResults = matches
                    totalMatches = matches.size()

                } catch (Exception e) {
                    ec.logger.error("智能匹配过程中发生错误: ${e.message}", e)
                    success = false
                    error = "匹配过程发生错误: ${e.message}"
                    totalMatches = 0
                    matchResults = []
                }

                // 智能匹配算分算法
                def calculateMatchScore(supply, demand) {
                    def score = 0.0

                    // 商品名称匹配 (40%)
                    if (supply.productName && demand.productName) {
                        def supplyName = supply.productName.toLowerCase()
                        def demandName = demand.productName.toLowerCase()
                        if (supplyName.contains(demandName) || demandName.contains(supplyName)) {
                            score += 0.4
                        } else if (supplyName.split(" ").any { word -> demandName.contains(word) }) {
                            score += 0.2
                        }
                    }

                    // 类别匹配 (30%)
                    if (supply.category && demand.category) {
                        if (supply.category.toLowerCase() == demand.category.toLowerCase()) {
                            score += 0.3
                        } else if (supply.category.toLowerCase().contains(demand.category.toLowerCase()) ||
                                 demand.category.toLowerCase().contains(supply.category.toLowerCase())) {
                            score += 0.15
                        }
                    }

                    // 价格匹配 (20%)
                    if (supply.price && demand.budgetMax) {
                        def priceRatio = supply.price / demand.budgetMax
                        if (priceRatio <= 1.0) {
                            score += 0.2 * (1.0 - Math.abs(priceRatio - 0.8))
                        }
                    }

                    // 数量匹配 (10%)
                    if (supply.quantity && demand.quantityNeeded) {
                        try {
                            def supplyQty = Double.parseDouble(supply.quantity.toString().replaceAll("[^\\d.]", ""))
                            def demandQty = Double.parseDouble(demand.quantityNeeded.toString().replaceAll("[^\\d.]", ""))
                            if (supplyQty >= demandQty) {
                                score += 0.1
                            } else {
                                score += 0.05 * (supplyQty / demandQty)
                            }
                        } catch (Exception e) {
                            // 数量解析失败，给予默认分数
                            score += 0.05
                        }
                    }

                    // 随机因子增加一些变化 (最多 ±0.1)
                    score += (Math.random() - 0.5) * 0.2

                    return Math.max(0.0, Math.min(1.0, score))
                }
            ]]></script>
        </actions>
    </service>

    <!-- ==================== 数据初始化服务 ==================== -->

    <service verb="initialize" noun="DemoData" authenticate="false" allow-remote="true">
        <description>初始化演示数据</description>
        <in-parameters>
            <parameter name="reset" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="message"/>
            <parameter name="suppliesCreated" type="Integer"/>
            <parameter name="demandsCreated" type="Integer"/>
        </out-parameters>
        <actions>
            <set field="success" value="true" type="Boolean"/>
            <set field="suppliesCreated" value="0" type="Integer"/>
            <set field="demandsCreated" value="0" type="Integer"/>

            <script><![CDATA[
                try {
                    def now = ec.user.nowTimestamp

                    // 如果reset为true，清理现有数据 - 使用disableAuthz
                    if (reset) {
                        ec.entity.find("marketplace.SupplyListing").disableAuthz().deleteAll()
                        ec.entity.find("marketplace.DemandListing").disableAuthz().deleteAll()
                        ec.entity.find("marketplace.match.Match").disableAuthz().deleteAll()
                    }

                    // 确保DEMO_MERCHANT商家存在
                    ec.artifactExecution.disableAuthz()
                    try {
                        def demoMerchant = ec.entity.find("mantle.party.Party")
                            .condition("partyId", "DEMO_MERCHANT").one()

                        if (!demoMerchant) {
                            // 创建演示商家
                            def partyValue = ec.entity.makeValue("mantle.party.Party")
                                .setFields([
                                    partyId: "DEMO_MERCHANT",
                                    partyTypeEnumId: "PtyOrganization"
                                ], true, null, false)
                            partyValue.create()

                            ec.entity.makeValue("mantle.party.Organization")
                                .setFields([
                                    partyId: "DEMO_MERCHANT",
                                    organizationName: "演示商家"
                                ], true, null, false)
                                .create()
                        }
                    } finally {
                        ec.artifactExecution.enableAuthz()
                    }

                    // 创建供应数据
                    def supplyData = [
                        [productName: "优质钢材", category: "钢材", quantity: "100吨", price: 4500.00, description: "高强度建筑钢材，质量保证"],
                        [productName: "水泥原料", category: "建材", quantity: "50吨", price: 350.00, description: "优质水泥，适用于各种建筑项目"],
                        [productName: "建筑沙石", category: "建材", quantity: "200立方米", price: 80.00, description: "精选建筑用沙石，粒度均匀"],
                        [productName: "装修材料", category: "装修", quantity: "500件", price: 120.00, description: "高档装修材料，环保无害"],
                        [productName: "钢筋混凝土", category: "钢材", quantity: "80吨", price: 5200.00, description: "预制钢筋混凝土构件"],
                        [productName: "瓷砖地板", category: "装修", quantity: "1000平方米", price: 85.00, description: "防滑耐磨瓷砖，多种花色"],
                        [productName: "电线电缆", category: "电气", quantity: "5000米", price: 15.00, description: "国标电线电缆，安全可靠"],
                        [productName: "管道材料", category: "管材", quantity: "200米", price: 45.00, description: "PVC管道，耐压耐腐蚀"]
                    ]

                    supplyData.eachWithIndex { data, index ->
                        def supplyId = "SUPPLY_DEMO_${index + 1}_${System.currentTimeMillis()}"

                        // 创建供应记录 - 使用基础实体，禁用授权检查
                        ec.artifactExecution.disableAuthz()
                        try {
                            def supplyValue = ec.entity.makeValue("marketplace.listing.Listing")
                                .setFields([
                                    listingId: supplyId,
                                    listingType: "SUPPLY",
                                    publisherId: "DEMO_MERCHANT",
                                    publisherType: "MERCHANT",
                                    title: data.productName,
                                    description: data.description,
                                    category: data.category,
                                    quantity: Double.parseDouble(data.quantity.toString().replaceAll("[^\\d.]", "")),
                                    quantityUnit: "吨",
                                    priceMin: data.price,
                                    priceMax: data.price,
                                    currencyUomId: "CNY",
                                    locationDesc: "广州市天河区",
                                    status: "ACTIVE",
                                    createdDate: now
                                ], true, null, false)
                                .setSequencedIdPrimary()

                            supplyValue.create()
                        } finally {
                            ec.artifactExecution.enableAuthz()
                        }

                        suppliesCreated++
                    }

                    // 创建需求数据
                    def demandData = [
                        [productName: "建筑钢材", category: "钢材", quantityNeeded: "150吨", budgetMax: 680000.00, description: "急需高质量建筑钢材"],
                        [productName: "水泥材料", category: "建材", quantityNeeded: "80吨", budgetMax: 30000.00, description: "工程项目用水泥"],
                        [productName: "装修用品", category: "装修", quantityNeeded: "300件", budgetMax: 45000.00, description: "高端装修材料需求"],
                        [productName: "地面材料", category: "装修", quantityNeeded: "800平方米", budgetMax: 75000.00, description: "商业空间地面铺设"],
                        [productName: "钢筋材料", category: "钢材", quantityNeeded: "120吨", budgetMax: 550000.00, description: "桥梁工程钢筋需求"],
                        [productName: "电气设备", category: "电气", quantityNeeded: "1套", budgetMax: 25000.00, description: "工厂电气系统升级"],
                        [productName: "管道系统", category: "管材", quantityNeeded: "500米", budgetMax: 30000.00, description: "给排水管道工程"]
                    ]

                    demandData.eachWithIndex { data, index ->
                        def demandId = "DEMAND_DEMO_${index + 1}_${System.currentTimeMillis()}"

                        // 创建需求记录 - 使用基础实体，禁用授权检查
                        ec.artifactExecution.disableAuthz()
                        try {
                            def demandValue = ec.entity.makeValue("marketplace.listing.Listing")
                                .setFields([
                                    listingId: demandId,
                                    listingType: "DEMAND",
                                    publisherId: "DEMO_MERCHANT",
                                    publisherType: "MERCHANT",
                                    title: data.productName,
                                    description: data.description,
                                    category: data.category,
                                    quantity: Double.parseDouble(data.quantityNeeded.toString().replaceAll("[^\\d.]", "")),
                                    quantityUnit: "吨",
                                    priceMin: data.budgetMax,
                                    priceMax: data.budgetMax,
                                    currencyUomId: "CNY",
                                    locationDesc: "深圳市南山区",
                                    status: "ACTIVE",
                                    createdDate: now
                                ], true, null, false)
                                .setSequencedIdPrimary()

                            demandValue.create()
                        } finally {
                            ec.artifactExecution.enableAuthz()
                        }

                        demandsCreated++
                    }

                    message = "演示数据初始化完成！创建了 ${suppliesCreated} 个供应信息和 ${demandsCreated} 个需求信息"

                } catch (Exception e) {
                    ec.logger.error("初始化演示数据失败: ${e.message}", e)
                    success = false
                    message = "初始化演示数据失败: ${e.message}"
                }
            ]]></script>
        </actions>
    </service>

</services>